{"version":3,"sources":["types/enum.ts","hooks/useFetch.ts","helpers/postApi.ts","components/todolist/TodoItem/TodoItem.tsx","components/todolist/TodoList.tsx","components/todocontainer/TodoContainer.tsx","components/input/Button.tsx","components/input/TextField.tsx","components/form/Form.tsx","theme/ThemeProvider.tsx","components/input/Slider.tsx","components/input/Refresh.tsx","helpers/updateData.ts","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["DataActionType","UpdateActionType","dataFetchReducer","state","action","type","FETCH_INIT","isLoading","isError","FETCH_SUCCESS","data","payload","FETCH_FAILURE","Error","showSuccess","msg","notification","success","message","description","duration","showerror","error","addApi","todo","route","a","axios","post","response","todoRes","task","postApi","TodoItem","_id","completed","index","createdAt","time","updatedAt","isAchieved","handleClick","isCheck","current","update","edit","checked","console","log","useRef","className","ref","id","defaultChecked","onClick","htmlFor","TodoList","editTask","todoList","todos","map","item","key","TodoContainer","title","size","children","Button","TextField","setTask","textRef","onChange","event","target","value","placeholder","Form","dispatch","useState","onSubmit","e","preventDefault","then","style","display","alignItems","themeColours","dark","colorTitle","color","backgroundColor","foregroundHeaderColor","foregroundBodyColor","light","ThemeContext","createContext","undefined","ThemeProvider","currentTheme","localStorage","getItem","themeName","setThemeName","setTheme","name","document","body","setProperty","useEffect","Provider","theme","Slider","React","useContext","setItem","Refresh","tasks","removeTasks","cleanTodos","reduce","acc","push","length","taskIds","viewBox","fill","d","todoReducer","initialValues","filter","App","Page","url","initialData","useReducer","fetchData","result","useFetch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2153dadb.chunk.js","sourcesContent":["export enum DataActionType {\n  FETCH_INIT,\n  FETCH_SUCCESS,\n  FETCH_FAILURE,\n}\n\nexport enum UpdateActionType {\n  addTodo,\n  removeTodo,\n  editTodo,\n  addFromDb,\n}\n","import { useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { TodoType, DataState, DataAction } from \"../types/types\";\nimport { DataActionType } from \"../types/enum\";\n\nconst dataFetchReducer = (state: DataState, action: DataAction): DataState => {\n  switch (action.type) {\n    case DataActionType.FETCH_INIT:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case DataActionType.FETCH_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case DataActionType.FETCH_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nexport const useFetch = (\n  url: string,\n  initialData: TodoType[]\n): [DataState, () => Promise<void>] => {\n  const [state, dispatch] = useReducer<\n    (state: DataState, action: DataAction) => DataState\n  >(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n\n  const fetchData = async (): Promise<void> => {\n    dispatch({ type: DataActionType.FETCH_INIT });\n    try {\n      const result = await axios(url);\n      dispatch({ type: DataActionType.FETCH_SUCCESS, payload: result.data });\n    } catch (error) {\n      dispatch({ type: DataActionType.FETCH_FAILURE });\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return [state, fetchData];\n};\n","import { notification } from \"antd\";\nimport axios from \"axios\";\n\nexport const showSuccess = (msg: string): void => {\n  notification.success({\n    message: \"Success\",\n    description: msg,\n    duration: 1.25,\n  });\n};\n\nexport const showerror = (error: Error): void => {\n  notification.error({\n    message: \"Error\",\n    description: error.message,\n    duration: 1.25,\n  });\n};\n\nexport const addApi = async (\n  todo: {\n    task?: string;\n    id?: string;\n    completed?: boolean;\n    taskIds?: string[];\n  },\n  route: string\n): Promise<any> => {\n  try {\n    const response = await axios.post(`http://localhost:4000/${route}`, todo);\n    const todoRes = response.data;\n    showSuccess(\n      todo.task ? \"Todo successfully added!\" : \"Todo successfully updated!\"\n    );\n    return todoRes;\n  } catch (err) {\n    showerror(err);\n  }\n};\n\nexport const postApi = async (\n  todo: {\n    task?: string;\n    id?: string;\n    completed?: boolean;\n    taskIds?: string[];\n  },\n  route: string\n): Promise<void> => {\n  try {\n    await axios.post(`http://localhost:4000/${route}`, todo);\n\n    showSuccess(\n      todo.task ? \"Todo successfully added!\" : \"Todo successfully updated!\"\n    );\n  } catch (err) {\n    showerror(err);\n  }\n};\n","import React, { useRef } from \"react\";\n\n// Types\nimport { TodoType, UpdateDataAction } from \"../../../types/types\";\n\n// API\nimport { postApi } from \"../../../helpers/postApi\";\n\ninterface AchievedTasks {\n  isAchieved?: React.Dispatch<UpdateDataAction>;\n}\n\ntype TodoItemProps = TodoType & AchievedTasks;\n\nexport const TodoItem: React.FC<TodoItemProps> = ({\n  _id,\n  task,\n  completed,\n  createdAt,\n  time,\n  updatedAt,\n  index,\n  isAchieved,\n}) => {\n  const handleClick = async (): Promise<void> => {\n    try {\n      if (isCheck.current) {\n        isAchieved({\n          type: \"editTodo\",\n          update: { index: _id, edit: !isCheck.current.checked },\n        });\n        await postApi({ completed: !isCheck.current.checked }, `update/${_id}`);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const isCheck = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"task\">\n      <input\n        ref={isCheck}\n        type=\"checkbox\"\n        id={`task-${index}`}\n        defaultChecked={completed}\n      ></input>\n      <label onClick={handleClick} htmlFor={`task-${index}`}>\n        <span className=\"custom-checkbox\"></span>\n        {task}\n      </label>\n    </div>\n  );\n};\n","import React from \"react\";\n\n// Types\nimport { UpdateDataAction, TodoType } from \"../../types/types\";\n\n// Component\nimport { TodoItem } from \"./TodoItem/TodoItem\";\n\ninterface TodoListProps {\n  data: TodoType[];\n  editTask: React.Dispatch<UpdateDataAction>;\n  todos: TodoType[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ editTask, todos }) => {\n  const todoList = todos.map((item, index) => {\n    return (\n      <TodoItem\n        _id={item._id}\n        index={index + 1}\n        completed={item.completed}\n        task={item.task}\n        key={item._id}\n        isAchieved={editTask}\n      />\n    );\n  });\n\n  return <div className=\"tasks\">{todoList}</div>;\n};\n","import React from \"react\";\n\ninterface TodoContainerProps {\n  children: React.ReactNode;\n  title?: string;\n  size: number;\n}\n\nexport const TodoContainer: React.FC<TodoContainerProps> = ({\n  title,\n  size,\n  children,\n}) => {\n  return (\n    <div className=\"todo__list-container\">\n      <div className=\"todo__list-header\">\n        <h2>{title}</h2>\n        <p>{size} tasks remaining</p>\n      </div>\n      <div className=\"todo__list-body\">{children}</div>\n    </div>\n  );\n};\n","import React from \"react\";\n\ninterface ButtonProps {}\n\nexport const Button: React.FC<ButtonProps> = () => {\n  return <button>+</button>;\n};\n","import React from \"react\";\n\ninterface TextFieldProps {\n  setTask: React.Dispatch<React.SetStateAction<{ task: string }>>;\n  textRef: React.RefObject<HTMLInputElement>;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({ setTask, textRef }) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setTask({ task: event.target.value });\n  };\n\n  return (\n    <input\n      ref={textRef}\n      onChange={handleChange}\n      placeholder={\"Add Todo\"}\n    ></input>\n  );\n};\n","import React, { useState, useRef } from \"react\";\n\nimport { addApi } from \"../../helpers/postApi\";\nimport { Button } from \"../input/Button\";\nimport { TextField } from \"../input/TextField\";\n// import { Refresh } from \"../input/Refresh\";\n\nimport { UpdateDataAction } from \"../../types/types\";\n\ninterface FormProps {\n  dispatch: React.Dispatch<UpdateDataAction>;\n  children: React.ReactNode;\n}\n\nexport const Form: React.FC<FormProps> = ({ dispatch, children }) => {\n  const [task, setTask] = useState<{ task: string }>({ task: \"\" });\n\n  const textRef = useRef<HTMLInputElement>(null);\n\n  const onSubmit = async (\n    e: React.FormEvent<HTMLFormElement>\n  ): Promise<void> => {\n    try {\n      e.preventDefault();\n      if (task.task) {\n        await addApi(task, \"add\").then((data) => {\n          dispatch({ type: \"addTodo\", todo: data });\n          if (textRef.current) {\n            textRef.current.value = \"\";\n          }\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Button />\n        <TextField textRef={textRef} setTask={setTask} />\n      </div>\n      {children}\n    </form>\n  );\n};\n","import React, { useState, createContext, useEffect } from \"react\";\n\nconst themeColours = {\n  dark: {\n    colorTitle: \"rgb(133, 150, 165,0.2)\",\n    color: \"rgb(133, 150, 165)\",\n    backgroundColor: \"#010A16\",\n    foregroundHeaderColor: \"#0b1622\",\n    foregroundBodyColor: \"#151f2e\",\n  },\n  light: {\n    color: \"#343434\",\n    backgroundColor: \"#f0f0f0\",\n    foregroundBodyColor: \"white\",\n    foregroundHeaderColor: \"#c9c9c9\",\n    colorTitle: \"rgb(52, 52, 52,0.2)\",\n  },\n};\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\ntype ThemeName = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: ThemeName;\n  setTheme: (name: ThemeName) => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType>(undefined!);\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const currentTheme =\n    localStorage.getItem(\"fsoweb.todo\") &&\n    localStorage.getItem(\"fsoweb.todo\") === \"dark\"\n      ? \"dark\"\n      : \"light\";\n\n  const [themeName, setThemeName] = useState<ThemeName>(currentTheme);\n\n  const setTheme = (name: ThemeName) => {\n    document.body.style.setProperty(\"--color\", themeColours[name].color);\n    document.body.style.setProperty(\n      \"--background-color\",\n      themeColours[name].backgroundColor\n    );\n    document.body.style.setProperty(\n      \"--foreground-body-color\",\n      themeColours[name].foregroundBodyColor\n    );\n    document.body.style.setProperty(\n      \"--foreground-header-color\",\n      themeColours[name].foregroundHeaderColor\n    );\n    document.body.style.setProperty(\n      \"--color-title\",\n      themeColours[name].colorTitle\n    );\n    document.body.style.setProperty(\n      \"--color-title\",\n      themeColours[name].colorTitle\n    );\n    setThemeName(name);\n  };\n\n  useEffect(() => {\n    //const darkOS = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    // setTheme(darkOS ? \"dark\" : \"light\");\n    setTheme(currentTheme);\n  }, [currentTheme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme: themeName, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => React.useContext(ThemeContext);\n","import React from \"react\";\nimport { useTheme } from \"../../theme/ThemeProvider\";\n\nexport const Slider: React.FC = () => {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <label id=\"switch\" className=\"switch\">\n      <input\n        type=\"checkbox\"\n        onChange={() => {\n          setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n          localStorage.setItem(\n            \"fsoweb.todo\",\n            theme === \"dark\" ? \"light\" : \"dark\"\n          );\n        }}\n      ></input>\n      <span className=\"slider round\"></span>\n    </label>\n  );\n};\n","import React from \"react\";\nimport { postApi } from \"../../helpers/postApi\";\nimport { UpdateDataAction, TodoType } from \"../../types/types\";\n\ninterface RefreshProps {\n  tasks?: TodoType[];\n  removeTasks?: React.Dispatch<UpdateDataAction>;\n}\n\nexport const Refresh: React.FC<RefreshProps> = ({ tasks, removeTasks }) => {\n  const handleClick = async (): Promise<void> => {\n    try {\n      const cleanTodos = tasks.reduce((acc: string[], item) => {\n        if (item.completed) {\n          acc.push(item._id);\n        }\n        return acc;\n      }, []);\n\n      if (cleanTodos.length === 0) return null;\n\n      removeTasks({ type: \"removeTodos\" });\n      await postApi({ taskIds: cleanTodos }, \"deleteTasks\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <button\n      style={{ display: \"flex\", alignItems: \"center\" }}\n      onClick={handleClick}\n    >\n      <svg className=\"svg-icon\" viewBox=\"0 0 20 20\">\n        <path\n          fill=\"none\"\n          d=\"M19.305,9.61c-0.235-0.235-0.615-0.235-0.85,0l-1.339,1.339c0.045-0.311,0.073-0.626,0.073-0.949\n            c0-3.812-3.09-6.901-6.901-6.901c-2.213,0-4.177,1.045-5.44,2.664l0.897,0.719c1.053-1.356,2.693-2.232,4.543-2.232\n            c3.176,0,5.751,2.574,5.751,5.751c0,0.342-0.037,0.675-0.095,1l-1.746-1.39c-0.234-0.235-0.614-0.235-0.849,0\n            c-0.235,0.235-0.235,0.615,0,0.85l2.823,2.25c0.122,0.121,0.282,0.177,0.441,0.172c0.159,0.005,0.32-0.051,0.44-0.172l2.25-2.25\n            C19.539,10.225,19.539,9.845,19.305,9.61z M10.288,15.752c-3.177,0-5.751-2.575-5.751-5.752c0-0.276,0.025-0.547,0.062-0.813\n            l1.203,1.203c0.235,0.234,0.615,0.234,0.85,0c0.234-0.235,0.234-0.615,0-0.85l-2.25-2.25C4.281,7.169,4.121,7.114,3.961,7.118\n            C3.802,7.114,3.642,7.169,3.52,7.291l-2.824,2.25c-0.234,0.235-0.234,0.615,0,0.85c0.235,0.234,0.615,0.234,0.85,0l1.957-1.559\n            C3.435,9.212,3.386,9.6,3.386,10c0,3.812,3.09,6.901,6.902,6.901c2.083,0,3.946-0.927,5.212-2.387l-0.898-0.719\n            C13.547,14.992,12.008,15.752,10.288,15.752z\"\n        ></path>\n      </svg>\n    </button>\n  );\n};\n","import { TodoType, UpdateDataAction } from \"../types/types\";\n\nexport const todoReducer = (\n  initialValues: TodoType[],\n  action: UpdateDataAction\n) => {\n  switch (action.type) {\n    case \"addTodo\":\n      return [...initialValues, action.todo];\n    case \"removeTodos\":\n      return initialValues.filter((item) => item.completed === false);\n\n    case \"editTodo\":\n      return initialValues.map((item, index) =>\n        item._id === action.update.index\n          ? {\n              ...item,\n              completed: action.update.edit,\n            }\n          : item\n      );\n    case \"addFromDb\":\n      return [...initialValues, ...action.data];\n    default:\n      return initialValues;\n  }\n};\n","import React, { useEffect, useReducer } from \"react\";\n\n// Fetch\nimport { useFetch } from \"../../hooks/useFetch\";\n\n// Component\nimport { TodoList } from \"../todolist/TodoList\";\nimport { TodoContainer } from \"../todocontainer/TodoContainer\";\nimport { Form } from \"../form/Form\";\nimport { Slider } from \"../input/Slider\";\nimport { Refresh } from \"../input/Refresh\";\n\n// Reducer\nimport { todoReducer } from \"../../helpers/updateData\";\n\n// Provider\nimport { ThemeProvider } from \"../../theme/ThemeProvider\";\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <Page />\n    </ThemeProvider>\n  );\n}\n\nconst Page: React.FC = () => {\n  const [{ data, isLoading, isError }] = useFetch(\n    \"http://localhost:4000/getTodo\",\n    []\n  );\n\n  const [todos, dispatch] = useReducer(todoReducer, []);\n\n  useEffect(() => {\n    if (data && data.length > 0) {\n      dispatch({ type: \"addFromDb\", data: data });\n    }\n  }, [data]);\n\n  return (\n    <div className=\"todo__container\">\n      <div className=\"todo_header\">\n        <Slider />\n        <h1>What I need to do</h1>\n      </div>\n      <div className=\"todo__list\">\n        {data && data.length === 0 && isLoading && <h3>Loading ...</h3>}\n        {isError && <h1>Something Went Wrong :(</h1>}\n        {data && data.length > 0 && (\n          <TodoContainer size={todos.length} title={\"Grocery\"}>\n            <TodoList data={data} todos={todos} editTask={dispatch} />\n            <Form dispatch={dispatch}>\n              <Refresh removeTasks={dispatch} tasks={todos} />\n            </Form>\n          </TodoContainer>\n        )}\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./app.scss\";\nimport App from \"./components/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}