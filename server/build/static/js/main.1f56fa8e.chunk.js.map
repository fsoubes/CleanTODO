{"version":3,"sources":["types/enum.ts","hooks/useFetchList.ts","helpers/postApi.ts","components/todolist/TodoItem/TodoItem.tsx","components/todolist/TodoList.tsx","components/todocontainer/TodoContainer.tsx","components/input/Button.tsx","components/input/TextField.tsx","components/form/Form.tsx","theme/ThemeProvider.tsx","components/input/Slider.tsx","components/input/Refresh.tsx","helpers/updateDataList.ts","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["DataActionType","UpdateActionType","dataFetchReducer","state","action","type","FETCH_INIT","isLoading","isError","FETCH_SUCCESS","dataList","payload","FETCH_FAILURE","Error","showSuccess","msg","notification","success","message","description","duration","showerror","error","addApi","todo","route","a","axios","post","process","DEV","response","todoRes","data","task","postApi","TodoItem","_id","completed","index","currentIdx","isAchieved","handleClick","isCheck","current","update","edit","checked","id","console","log","useRef","className","ref","defaultChecked","onClick","htmlFor","TodoList","editTask","todos","todoList","map","item","key","TodoContainer","size","children","todoName","setId","currentId","deleteList","handleRemove","event","preventDefault","viewBox","cx","cy","r","points","onChange","parseInt","target","value","Button","width","height","d","TextField","setTask","textRef","placeHold","placeholder","Form","dispatch","isAddingList","updateListName","useState","onSubmit","e","params","name","then","prev","style","display","alignItems","themeColours","dark","colorTitle","color","backgroundColor","foregroundHeaderColor","foregroundBodyColor","colorArrow","light","ThemeContext","createContext","undefined","ThemeProvider","currentTheme","localStorage","getItem","themeName","setThemeName","setTheme","document","body","setProperty","useEffect","Provider","theme","Slider","React","useContext","setItem","Refresh","tasks","removeTasks","cleanTodos","reduce","acc","push","length","taskIds","xmlns","todoListReducer","initialValues","updateList","filter","updatedTasks","App","Page","url","initialData","useReducer","fetchData","result","useFetchList","dispatchList","idx","setIdx","names","setNames","removeList","currentName","justifyContent","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1f56fa8e.chunk.js","sourcesContent":["export enum DataActionType {\n  FETCH_INIT,\n  FETCH_SUCCESS,\n  FETCH_FAILURE,\n}\n\nexport enum UpdateActionType {\n  addTodo,\n  removeTodo,\n  editTodo,\n  addFromDb,\n}\n","import { useReducer, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { TodoList, DataStateList, DataActionList } from \"../types/types\";\nimport { DataActionType } from \"../types/enum\";\n\nconst dataFetchReducer = (\n  state: DataStateList,\n  action: DataActionList\n): DataStateList => {\n  switch (action.type) {\n    case DataActionType.FETCH_INIT:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case DataActionType.FETCH_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        dataList: action.payload,\n      };\n    case DataActionType.FETCH_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nexport const useFetchList = (\n  url: string,\n  initialData: TodoList[]\n): [DataStateList, () => Promise<void>] => {\n  const [state, dispatch] = useReducer<\n    (state: DataStateList, action: DataActionList) => DataStateList\n  >(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    dataList: initialData,\n  });\n\n  const fetchData = async (): Promise<void> => {\n    dispatch({ type: DataActionType.FETCH_INIT });\n    try {\n      const result = await axios(url);\n      dispatch({\n        type: DataActionType.FETCH_SUCCESS,\n        payload: result.data,\n      });\n    } catch (error) {\n      dispatch({ type: DataActionType.FETCH_FAILURE });\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return [state, fetchData];\n};\n","import { notification } from \"antd\";\nimport axios from \"axios\";\n\nexport const showSuccess = (msg: string): void => {\n  notification.success({\n    message: \"Success\",\n    description: msg,\n    duration: 1.25,\n  });\n};\n\nexport const showerror = (error: Error): void => {\n  notification.error({\n    message: \"Error\",\n    description: error.message,\n    duration: 1.25,\n  });\n};\n\nexport const addApi = async (\n  todo: {\n    task?: string;\n    id?: string;\n    completed?: boolean;\n    taskIds?: string[];\n  },\n  route: string\n): Promise<any> => {\n  try {\n    const response = await axios.post(\n      process.env.DEV ? `localhost:4000/${route}` : `/${route}`,\n      todo\n    );\n    const todoRes = response.data;\n    showSuccess(\n      todo.task ? \"Todo successfully added!\" : \"Todo successfully updated!\"\n    );\n    return todoRes;\n  } catch (err) {\n    showerror(err);\n  }\n};\n\nexport const postApi = async (\n  todo: {\n    task?: string;\n    id?: string;\n    completed?: boolean;\n    taskIds?: string[];\n  },\n  route: string\n): Promise<void> => {\n  try {\n    await axios.post(\n      process.env.DEV ? `localhost:4000/${route}` : `/${route}`,\n      todo\n    );\n\n    showSuccess(\n      todo.task ? \"Todo successfully added!\" : \"Todo successfully updated!\"\n    );\n  } catch (err) {\n    showerror(err);\n  }\n};\n","import React, { useRef } from \"react\";\n\n// Types\nimport { TodoType, UpdateDataAction } from \"../../../types/types\";\n\n// API\nimport { postApi } from \"../../../helpers/postApi\";\n\ninterface AchievedTasks {\n  isAchieved?: React.Dispatch<UpdateDataAction>;\n  currentIdx?: number;\n}\n\ntype TodoItemProps = TodoType & AchievedTasks;\n\nexport const TodoItem: React.FC<TodoItemProps> = ({\n  _id,\n  task,\n  completed,\n  index,\n  currentIdx,\n  isAchieved,\n}) => {\n  const handleClick = async (): Promise<void> => {\n    try {\n      if (isCheck.current) {\n        isAchieved({\n          type: \"editTodo\",\n          update: {\n            index: _id,\n            edit: !isCheck.current.checked,\n            id: currentIdx,\n          },\n        });\n        await postApi({ completed: !isCheck.current.checked }, `update/${_id}`);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const isCheck = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"task\">\n      <input\n        ref={isCheck}\n        type=\"checkbox\"\n        id={`task-${index}`}\n        defaultChecked={completed}\n      ></input>\n      <label onClick={handleClick} htmlFor={`task-${index}`}>\n        <span className=\"custom-checkbox\"></span>\n        {task}\n      </label>\n    </div>\n  );\n};\n","import React from \"react\";\n\n// Types\nimport { UpdateDataAction, TodoType } from \"../../types/types\";\n\n// Component\nimport { TodoItem } from \"./TodoItem/TodoItem\";\n\ninterface TodoListProps {\n  editTask: React.Dispatch<UpdateDataAction>;\n  todos: TodoType[];\n  currentIdx: number;\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  editTask,\n  todos,\n  currentIdx,\n}) => {\n  const todoList = todos.map((item, index) => {\n    return (\n      <TodoItem\n        _id={item._id}\n        index={index + 1}\n        currentIdx={currentIdx}\n        completed={item.completed}\n        task={item.task}\n        key={item._id}\n        isAchieved={editTask}\n      />\n    );\n  });\n\n  return <div className=\"tasks\">{todoList}</div>;\n};\n","import React from \"react\";\n\nexport interface TodoContainerProps {\n  children: React.ReactNode;\n  todoName?: string[];\n  size: number;\n  setId?: React.Dispatch<React.SetStateAction<number>>;\n  deleteList?: () => Promise<void>;\n  currentId?: number;\n}\n\nexport const TodoContainer: React.FC<TodoContainerProps> = ({\n  size,\n  children,\n  todoName,\n  setId,\n  currentId,\n  deleteList,\n}) => {\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    setId(parseInt(event.target.value));\n  };\n\n  const handleRemove = async (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ): Promise<void> => {\n    event.preventDefault();\n    deleteList();\n  };\n\n  return (\n    <div className=\"todo__list-container\">\n      <div className=\"todo__list-header\">\n        <div onClick={handleRemove} className=\"todo__list-remove\">\n          <svg viewBox=\"0 0 24 24\">\n            <circle cx=\"12\" cy=\"12\" r=\"12\"></circle>\n            <polygon\n              className=\"close-btn\"\n              points=\"17.8,16.7 16.6,17.9 12,13.3 7.4,17.9 6.2,16.7 10.8,12.1 6.2,7.5 7.4,6.3 12,11 16.6,6.4 17.8,7.6 13.2,12.2 \"\n            ></polygon>\n          </svg>\n        </div>\n\n        <div className=\"todo__list-info\">\n          <div className=\"custom-select\">\n            <select onChange={handleSelect} value={currentId}>\n              {todoName.map((value, index): any => (\n                <option key={index} value={index}>\n                  {value}\n                </option>\n              ))}\n            </select>\n            <span className=\"custom-arrow\"></span>\n          </div>\n          <p>{size} tasks remaining</p>\n        </div>\n      </div>\n      <div className=\"todo__list-body\">{children}</div>\n    </div>\n  );\n};\n","import React from \"react\";\n\ninterface ButtonProps {}\n\nexport const Button: React.FC<ButtonProps> = () => {\n  return (\n    <button className=\"confirm__button\">\n      <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\">\n        <path d=\"M24 10h-10v-10h-4v10h-10v4h10v10h4v-10h10z\" />\n      </svg>\n    </button>\n  );\n};\n","import React from \"react\";\n\ninterface TextFieldProps {\n  setTask?: React.Dispatch<React.SetStateAction<{ task: string }>>;\n  textRef?: React.RefObject<HTMLInputElement>;\n  placeHold?: string;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({\n  setTask,\n  textRef,\n  placeHold,\n}) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setTask({ task: event.target.value });\n  };\n\n  return (\n    <input\n      ref={textRef}\n      onChange={handleChange}\n      placeholder={placeHold}\n      className=\"confirm__input\"\n    ></input>\n  );\n};\n","import React, { useState, useRef } from \"react\";\n\nimport { addApi } from \"../../helpers/postApi\";\nimport { Button } from \"../input/Button\";\nimport { TextField } from \"../input/TextField\";\n\nimport { UpdateDataActionList } from \"../../types/types\";\n\ninterface FormProps {\n  dispatch: React.Dispatch<UpdateDataActionList>;\n  route: string;\n  action: string;\n  children?: React.ReactNode;\n  isAddingList?: boolean;\n  updateListName?: React.Dispatch<React.SetStateAction<string[] | []>>;\n  currentIdx?: number;\n}\n\nexport const Form: React.FC<FormProps> = ({\n  dispatch,\n  children,\n  route,\n  action,\n  isAddingList = false,\n  updateListName,\n  currentIdx,\n}) => {\n  const [task, setTask] = useState<{ task: string }>({ task: \"\" });\n\n  const textRef = useRef<HTMLInputElement>(null);\n\n  const onSubmit = async (\n    e: React.FormEvent<HTMLFormElement>\n  ): Promise<void> => {\n    try {\n      e.preventDefault();\n      if (task.task) {\n        const params = {\n          ...(isAddingList && {\n            name: task.task,\n          }),\n          ...(!isAddingList && {\n            task: task.task,\n          }),\n        };\n        await addApi(params, route).then((data) => {\n          if (isAddingList) {\n            updateListName((prev) => [...prev, task.task]);\n            dispatch({ type: action, todoList: data });\n          } else {\n            dispatch({ type: action, update: { todo: data, id: currentIdx } });\n          }\n\n          setTask({ task: \"\" });\n          if (textRef.current) {\n            textRef.current.value = \"\";\n          }\n        });\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Button />\n\n        <TextField\n          textRef={textRef}\n          setTask={setTask}\n          placeHold={isAddingList ? \"Add List\" : \"Add Todo\"}\n        />\n      </div>\n      {children}\n    </form>\n  );\n};\n","import React, { useState, createContext, useEffect } from \"react\";\n\nconst themeColours = {\n  dark: {\n    colorTitle: \"rgb(133, 150, 165,0.2)\",\n    color: \"rgb(133, 150, 165)\",\n    backgroundColor: \"#010A16\",\n    foregroundHeaderColor: \"#0b1622\",\n    foregroundBodyColor: \"#151f2e\",\n    colorArrow: \"#0b1622\",\n  },\n  light: {\n    colorArrow: \"#c9c9c9\",\n    color: \"#343434\",\n    backgroundColor: \"#f0f0f0\",\n    foregroundBodyColor: \"white\",\n    foregroundHeaderColor: \"#c9c9c9\",\n    colorTitle: \"rgb(52, 52, 52,0.2)\",\n  },\n};\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\ntype ThemeName = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: ThemeName;\n  setTheme: (name: ThemeName) => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType>(undefined!);\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const currentTheme =\n    localStorage.getItem(\"fsoweb.todo\") &&\n    localStorage.getItem(\"fsoweb.todo\") === \"dark\"\n      ? \"dark\"\n      : \"light\";\n\n  const [themeName, setThemeName] = useState<ThemeName>(currentTheme);\n\n  const setTheme = (name: ThemeName) => {\n    document.body.style.setProperty(\"--color\", themeColours[name].color);\n    document.body.style.setProperty(\n      \"--background-color\",\n      themeColours[name].backgroundColor\n    );\n    document.body.style.setProperty(\n      \"--foreground-body-color\",\n      themeColours[name].foregroundBodyColor\n    );\n    document.body.style.setProperty(\n      \"--foreground-header-color\",\n      themeColours[name].foregroundHeaderColor\n    );\n    document.body.style.setProperty(\n      \"--color-title\",\n      themeColours[name].colorTitle\n    );\n    document.body.style.setProperty(\n      \"--color-arrow\",\n      themeColours[name].colorArrow\n    );\n\n    setThemeName(name);\n  };\n\n  useEffect(() => {\n    //const darkOS = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    // setTheme(darkOS ? \"dark\" : \"light\");\n    setTheme(currentTheme);\n  }, [currentTheme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme: themeName, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => React.useContext(ThemeContext);\n","import React from \"react\";\nimport { useTheme } from \"../../theme/ThemeProvider\";\n\nexport const Slider: React.FC = () => {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <label id=\"switch\" className=\"switch\">\n      <input\n        type=\"checkbox\"\n        onChange={() => {\n          setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n          localStorage.setItem(\n            \"fsoweb.todo\",\n            theme === \"dark\" ? \"light\" : \"dark\"\n          );\n        }}\n      ></input>\n      <span className=\"slider round\"></span>\n    </label>\n  );\n};\n","import React from \"react\";\nimport { postApi } from \"../../helpers/postApi\";\nimport { UpdateDataAction, TodoType } from \"../../types/types\";\n\ninterface RefreshProps {\n  tasks?: TodoType[];\n  removeTasks?: React.Dispatch<UpdateDataAction>;\n  currentIdx: number;\n}\n\nexport const Refresh: React.FC<RefreshProps> = ({\n  tasks,\n  removeTasks,\n  currentIdx,\n}) => {\n  const handleClick = async (): Promise<void> => {\n    try {\n      const cleanTodos = tasks.reduce((acc: string[], item) => {\n        if (item.completed) {\n          acc.push(item._id);\n        }\n        return acc;\n      }, []);\n\n      if (cleanTodos.length === 0) return null;\n\n      removeTasks({ type: \"removeTodos\", update: { id: currentIdx } });\n      await postApi({ taskIds: cleanTodos }, \"deleteTasks\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <button\n      style={{ display: \"flex\", alignItems: \"center\" }}\n      className=\"confirm__button\"\n      onClick={handleClick}\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path d=\"M20.944 12.979c-.489 4.509-4.306 8.021-8.944 8.021-2.698 0-5.112-1.194-6.763-3.075l1.245-1.633c1.283 1.645 3.276 2.708 5.518 2.708 3.526 0 6.444-2.624 6.923-6.021h-2.923l4-5.25 4 5.25h-3.056zm-15.864-1.979c.487-3.387 3.4-6 6.92-6 2.237 0 4.228 1.059 5.51 2.698l1.244-1.632c-1.65-1.876-4.061-3.066-6.754-3.066-4.632 0-8.443 3.501-8.941 8h-3.059l4 5.25 4-5.25h-2.92z\" />\n      </svg>\n    </button>\n  );\n};\n","import { UpdateDataActionList, TodoList, TodoType } from \"../types/types\";\n\nexport const todoListReducer = (\n  initialValues: TodoList[],\n  action: UpdateDataActionList\n) => {\n  switch (action.type) {\n    case \"addList\":\n      return [...initialValues, action.todoList];\n    case \"addTodoToList\": {\n      const updateList = {\n        ...initialValues[action.update.id],\n        tasks: [...initialValues[action.update.id].tasks, action.update.todo],\n      };\n      initialValues[action.update.id] = updateList;\n      return [...initialValues];\n    }\n    case \"removeTodos\":\n      const updateList = {\n        ...initialValues[action.update.id],\n        tasks: initialValues[action.update.id][\"tasks\"].filter(\n          (item: TodoType) => item.completed === false\n        ),\n      };\n      initialValues[action.update.id] = updateList;\n      return [...initialValues];\n    case \"removeList\":\n      return initialValues.filter((item) => item.name !== action.name);\n    case \"editTodo\":\n      const updatedTasks = {\n        ...initialValues[action.update.id],\n        tasks: initialValues[action.update.id][\"tasks\"].map((item: TodoType) =>\n          item._id === action.update.index\n            ? {\n                ...item,\n                completed: action.update.edit,\n              }\n            : item\n        ),\n      };\n      initialValues[action.update.id] = updatedTasks;\n      return [...initialValues];\n    case \"addFromDb\":\n      return [...initialValues, ...action.data];\n    default:\n      return initialValues;\n  }\n};\n","import React, { useEffect, useReducer, useState } from \"react\";\n\n// Fetch\nimport { useFetchList } from \"../../hooks/useFetchList\";\n\n// Component\nimport { TodoList } from \"../todolist/TodoList\";\nimport { TodoContainer } from \"../todocontainer/TodoContainer\";\nimport { Form } from \"../form/Form\";\nimport { Slider } from \"../input/Slider\";\nimport { Refresh } from \"../input/Refresh\";\n\n// Reducer\nimport { todoListReducer } from \"../../helpers/updateDataList\";\n\n// Provider\nimport { ThemeProvider } from \"../../theme/ThemeProvider\";\n\n// Api\nimport { postApi } from \"../../helpers/postApi\";\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <Page />\n    </ThemeProvider>\n  );\n}\n\nconst Page: React.FC = () => {\n  const [{ dataList, isLoading, isError }] = useFetchList(\n    process.env.DEV ? \"localhost:4000/getLists\" : \"/getLists\",\n    []\n  );\n\n  const [todoList, dispatchList] = useReducer(todoListReducer, []);\n  const [idx, setIdx] = useState<number>(0);\n  const [names, setNames] = useState<string[] | []>([]);\n\n  const removeList = async (): Promise<void> => {\n    try {\n      const currentName = names[idx];\n      setIdx(0);\n      await postApi({}, `deleteList/${todoList[idx]._id}`);\n      dispatchList({ type: \"removeList\", name: currentName });\n      setNames((prev) => prev.filter((item) => item !== currentName));\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  useEffect(() => {\n    if (dataList && dataList.length > 0) {\n      setNames(dataList.map((item) => item.name));\n      dispatchList({ type: \"addFromDb\", data: dataList });\n    }\n  }, [dataList]);\n\n  return (\n    <div className=\"todo__container\">\n      <div className=\"todo_header\">\n        <Slider />\n        <h1>What I need to do</h1>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          marginBottom: \"2rem\",\n        }}\n      >\n        <Form\n          action={\"addList\"}\n          route={\"addList\"}\n          dispatch={dispatchList}\n          updateListName={setNames}\n          isAddingList\n        ></Form>\n      </div>\n      <div className=\"todo__list\">\n        {dataList && dataList.length === 0 && isLoading && <h3>Loading ...</h3>}\n        {isError && <h1>Something Went Wrong :(</h1>}\n        {dataList && todoList && todoList.length > 0 && !isLoading && (\n          <TodoContainer\n            size={todoList[idx][\"tasks\"].length}\n            todoName={names}\n            setId={setIdx}\n            currentId={idx}\n            deleteList={removeList}\n          >\n            <TodoList\n              todos={todoList[idx][\"tasks\"]}\n              editTask={dispatchList}\n              currentIdx={idx}\n            />\n            <Form\n              currentIdx={idx}\n              dispatch={dispatchList}\n              action={\"addTodoToList\"}\n              route={`addToList/${todoList[idx]._id}`}\n            >\n              <Refresh\n                currentIdx={idx}\n                removeTasks={dispatchList}\n                tasks={todoList[idx][\"tasks\"]}\n              />\n            </Form>\n          </TodoContainer>\n        )}\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./app.scss\";\nimport App from \"./components/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}